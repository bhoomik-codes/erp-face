# Generated by Django 3.1.12 on 2025-08-07 09:58

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the employee.', max_length=100)),
                ('employee_id', models.CharField(help_text='Unique identifier for the employee (e.g., staff ID).', max_length=50, unique=True)),
                ('photo', models.URLField(help_text="URL of the employee's photo for recognition.")),
                ('face_encoding', models.BinaryField(blank=True, help_text="Serialized face encoding derived from the employee's photo.", null=True)),
                ('role', models.CharField(choices=[('TRAINEE', 'Trainee'), ('JUNIOR_DEVELOPER', 'Junior Developer'), ('SENIOR_DEVELOPER', 'Senior Developer'), ('TEAM_LEADER', 'Team Leader'), ('HR', 'HR'), ('CEO', 'CEO')], default='TRAINEE', help_text='The role of the employee within the company.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_seen', models.DateTimeField(blank=True, help_text='Last time the employee was recognized by the system.', null=True)),
                ('team_members', models.ManyToManyField(blank=True, help_text='For Team Leaders, select the developers working under them.', limit_choices_to={'role__in': ['JUNIOR_DEVELOPER', 'SENIOR_DEVELOPER', 'TRAINEE']}, related_name='team_leaders', to='attendance_app.Employee')),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LocationSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(default=0.0, help_text='Latitude of the office location.')),
                ('longitude', models.FloatField(default=0.0, help_text='Longitude of the office location.')),
                ('radius_meters', models.IntegerField(default=500, help_text='Radius in meters within which attendance can be marked.')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LeaveHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.CharField(max_length=7)),
                ('leaves_taken', models.IntegerField(default=0)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='attendance_app.employee')),
            ],
            options={
                'unique_together': {('employee', 'month')},
            },
        ),
        migrations.CreateModel(
            name='AttendanceRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, help_text='The date when attendance was marked.')),
                ('time', models.TimeField(default=django.utils.timezone.now, help_text='The time when attendance was marked.')),
                ('attendance_type', models.CharField(choices=[('IN', 'In Time'), ('LUNCH_IN', 'Lunch In'), ('LUNCH_OUT', 'Lunch Out'), ('OUT', 'Out Time'), ('BREAK IN', 'Break In'), ('BREAK OUT', 'Break Out')], default='IN', max_length=10)),
                ('remarks', models.CharField(blank=True, help_text='Additional remarks (e.g., late entry, extended lunch)', max_length=255, null=True)),
                ('emotional_state', models.CharField(blank=True, help_text='Detected emotional state during attendance marking (e.g., happy, neutral, sad).', max_length=50, null=True)),
                ('employee', models.ForeignKey(help_text='The employee associated with this attendance record.', on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='attendance_app.employee')),
            ],
            options={
                'verbose_name': 'Attendance Record',
                'verbose_name_plural': 'Attendance Records',
                'ordering': ['-date', '-time'],
                'unique_together': {('employee', 'date', 'attendance_type')},
            },
        ),
    ]
